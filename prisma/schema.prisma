generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model achievements {
  id              String   @id
  userId          String
  type            String
  title           String
  description     String
  reputationBonus Int      @default(0)
  earnedAt        DateTime @default(now())
  users           users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model annotation_replies {
  id           String      @id
  annotationId String
  userId       String
  content      String
  createdAt    DateTime    @default(now())
  annotations  annotations @relation(fields: [annotationId], references: [id], onDelete: Cascade)
  users        users       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model annotations {
  id                 String               @id
  workId             String?
  userId             String
  paragraphIndex     Int
  startOffset        Int?
  endOffset          Int?
  content            String
  type               AnnotationType       @default(FEEDBACK)
  isResolved         Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  articleId          String?
  annotation_replies annotation_replies[]
  articles           articles?            @relation(fields: [articleId], references: [id], onDelete: Cascade)
  users              users                @relation(fields: [userId], references: [id], onDelete: Cascade)
  works              works?               @relation(fields: [workId], references: [id], onDelete: Cascade)
}

model article_relationships {
  id                                                String           @id
  sourceId                                          String
  targetId                                          String
  projectId                                         String
  type                                              RelationshipType @default(REFERENCES)
  description                                       String?
  metadata                                          Json             @default("{}")
  createdAt                                         DateTime         @default(now())
  projects                                          projects         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  articles_article_relationships_sourceIdToarticles articles         @relation("article_relationships_sourceIdToarticles", fields: [sourceId], references: [id], onDelete: Cascade)
  articles_article_relationships_targetIdToarticles articles         @relation("article_relationships_targetIdToarticles", fields: [targetId], references: [id], onDelete: Cascade)

  @@unique([sourceId, targetId, type])
}

model articles {
  id                                                             String                  @id
  title                                                          String
  content                                                        Json
  excerpt                                                        String?
  slug                                                           String
  authorId                                                       String
  projectId                                                      String
  categoryId                                                     String?
  templatePromptId                                               String?
  status                                                         ArticleStatus           @default(DRAFT)
  visibility                                                     Visibility              @default(PRIVATE)
  acceptingFeedback                                              Boolean                 @default(false)
  metadata                                                       Json                    @default("{}")
  tags                                                           String[]
  position                                                       Int                     @default(0)
  viewCount                                                      Int                     @default(0)
  createdAt                                                      DateTime                @default(now())
  updatedAt                                                      DateTime
  publishedAt                                                    DateTime?
  annotations                                                    annotations[]
  article_relationships_article_relationships_sourceIdToarticles article_relationships[] @relation("article_relationships_sourceIdToarticles")
  article_relationships_article_relationships_targetIdToarticles article_relationships[] @relation("article_relationships_targetIdToarticles")
  users                                                          users                   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  project_categories                                             project_categories?     @relation(fields: [categoryId], references: [id])
  projects                                                       projects                @relation(fields: [projectId], references: [id], onDelete: Cascade)
  comments                                                       comments[]
  works                                                          works[]

  @@unique([projectId, slug])
}

model audit_events {
  id         String   @id
  userId     String?
  action     String
  resource   String
  resourceId String?
  oldValues  Json?
  newValues  Json?
  metadata   Json     @default("{}")
  ipHash     String
  userAgent  String
  success    Boolean  @default(true)
  timestamp  DateTime @default(now())
}

model collection_items {
  id           String      @id
  collectionId String
  workId       String
  addedAt      DateTime    @default(now())
  collections  collections @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  works        works       @relation(fields: [workId], references: [id], onDelete: Cascade)

  @@unique([collectionId, workId])
}

model collections {
  id               String             @id
  name             String
  description      String?
  ownerId          String
  isPublic         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  collection_items collection_items[]
  users            users              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model comments {
  id             String     @id
  content        String
  workId         String?
  authorId       String
  parentId       String?
  isPublic       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime
  articleId      String?
  articles       articles?  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  users          users      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments       comments?  @relation("commentsTocomments", fields: [parentId], references: [id])
  other_comments comments[] @relation("commentsTocomments")
  works          works?     @relation(fields: [workId], references: [id], onDelete: Cascade)
}

model communities {
  id                    String                  @id
  name                  String
  description           String?
  slug                  String                  @unique
  subdomain             String                  @unique
  isPrivate             Boolean                 @default(true)
  isApproved            Boolean                 @default(false)
  ownerId               String
  settings              Json                    @default("{}")
  customDomain          String?
  logoUrl               String?
  primaryColor          String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  privacyLevel          CommunityPrivacy        @default(PUBLIC)
  users                 users                   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  community_invites     community_invites[]
  community_members     community_members[]
  community_proposals   community_proposals?
  discussion_categories discussion_categories[]
  discussion_posts      discussion_posts[]
  works                 works[]
}

model community_invites {
  id          String       @id
  communityId String
  invitedBy   String
  inviteeId   String?
  email       String?
  token       String       @unique
  status      InviteStatus @default(PENDING)
  expiresAt   DateTime
  createdAt   DateTime     @default(now())
  communities communities  @relation(fields: [communityId], references: [id], onDelete: Cascade)
  users       users        @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
}

model community_members {
  id          String        @id
  userId      String
  communityId String
  role        CommunityRole @default(MEMBER)
  joinedAt    DateTime      @default(now())
  communities communities   @relation(fields: [communityId], references: [id], onDelete: Cascade)
  users       users         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, communityId])
}

model community_proposals {
  id                                          String         @id
  proposedName                                String
  proposedSlug                                String         @unique
  description                                 String
  purpose                                     String
  expectedMembers                             Int
  proposerId                                  String
  status                                      ProposalStatus @default(PENDING)
  reviewedBy                                  String?
  reviewedAt                                  DateTime?
  rejectionReason                             String?
  approvedSlug                                String?        @unique
  communityId                                 String?        @unique
  createdAt                                   DateTime       @default(now())
  updatedAt                                   DateTime
  communities                                 communities?   @relation(fields: [communityId], references: [id])
  users_community_proposals_proposerIdTousers users          @relation("community_proposals_proposerIdTousers", fields: [proposerId], references: [id], onDelete: Cascade)
  users_community_proposals_reviewedByTousers users?         @relation("community_proposals_reviewedByTousers", fields: [reviewedBy], references: [id])
}

model discussion_categories {
  id               String             @id
  name             String
  description      String?
  slug             String
  color            String             @default("#6366f1")
  icon             String             @default("MessageSquare")
  position         Int                @default(0)
  communityId      String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  communities      communities        @relation(fields: [communityId], references: [id], onDelete: Cascade)
  discussion_posts discussion_posts[]

  @@unique([communityId, slug])
}

model discussion_posts {
  id                    String                @id
  title                 String
  content               String
  authorId              String
  communityId           String
  categoryId            String
  privacy               PostPrivacy           @default(PUBLIC)
  isPinned              Boolean               @default(false)
  upvotes               Int                   @default(0)
  downvotes             Int                   @default(0)
  viewCount             Int                   @default(0)
  replyCount            Int                   @default(0)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime
  aiScore               Float?
  citations             Json?
  hasAIFlag             Boolean               @default(false)
  hasPlagiarismFlag     Boolean               @default(false)
  moderationNotes       String?
  moderationStatus      ModerationStatus      @default(CLEAN)
  plagiarismScore       Float?
  qualityScore          Int?
  topics                String[]              @default([])
  users                 users                 @relation(fields: [authorId], references: [id], onDelete: Cascade)
  discussion_categories discussion_categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  communities           communities           @relation(fields: [communityId], references: [id], onDelete: Cascade)
  discussion_replies    discussion_replies[]
  discussion_votes      discussion_votes[]
  moderation_appeals    moderation_appeals[]
}

model discussion_replies {
  id                       String               @id
  content                  String
  authorId                 String
  postId                   String
  parentId                 String?
  createdAt                DateTime             @default(now())
  updatedAt                DateTime
  aiScore                  Float?
  citations                Json?
  hasAIFlag                Boolean              @default(false)
  hasPlagiarismFlag        Boolean              @default(false)
  isAccepted               Boolean              @default(false)
  moderationNotes          String?
  moderationStatus         ModerationStatus     @default(CLEAN)
  plagiarismScore          Float?
  qualityScore             Int?
  users                    users                @relation(fields: [authorId], references: [id], onDelete: Cascade)
  discussion_replies       discussion_replies?  @relation("discussion_repliesTodiscussion_replies", fields: [parentId], references: [id])
  other_discussion_replies discussion_replies[] @relation("discussion_repliesTodiscussion_replies")
  discussion_posts         discussion_posts     @relation(fields: [postId], references: [id], onDelete: Cascade)
  moderation_appeals       moderation_appeals[]
}

model discussion_votes {
  id               String           @id
  userId           String
  postId           String
  isUpvote         Boolean
  createdAt        DateTime         @default(now())
  discussion_posts discussion_posts @relation(fields: [postId], references: [id], onDelete: Cascade)
  users            users            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model follows {
  id                               String   @id
  followerId                       String
  followingId                      String
  createdAt                        DateTime @default(now())
  users_follows_followerIdTousers  users    @relation("follows_followerIdTousers", fields: [followerId], references: [id], onDelete: Cascade)
  users_follows_followingIdTousers users    @relation("follows_followingIdTousers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model gdpr_requests {
  id               String    @id
  userId           String
  email            String
  right            String
  description      String
  status           String    @default("pending")
  requestDate      DateTime  @default(now())
  processedDate    DateTime?
  expirationDate   DateTime
  verificationData Json?
  responseData     Json?
}

model moderation_actions {
  id          String   @id
  moderatorId String
  targetType  String
  targetId    String
  action      String
  reason      String?
  createdAt   DateTime @default(now())
  users       users    @relation(fields: [moderatorId], references: [id], onDelete: Cascade)
}

model moderation_appeals {
  id                 String              @id
  targetType         AppealTargetType
  postId             String?
  replyId            String?
  userId             String
  reason             String
  message            String?
  status             AppealStatus        @default(PENDING)
  staffUserId        String?
  staffNotes         String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime
  discussion_posts   discussion_posts?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  discussion_replies discussion_replies? @relation(fields: [replyId], references: [id], onDelete: Cascade)
  users              users               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model newsletters {
  id        String    @id
  subject   String
  content   String
  status    String    @default("draft")
  sentAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime
}

model notifications {
  id                                 String           @id
  userId                             String
  actorId                            String?
  type                               NotificationType
  message                            String
  link                               String?
  read                               Boolean          @default(false)
  metadata                           Json?
  createdAt                          DateTime         @default(now())
  users_notifications_actorIdTousers users?           @relation("notifications_actorIdTousers", fields: [actorId], references: [id])
  users_notifications_userIdTousers  users            @relation("notifications_userIdTousers", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, read, createdAt])
}

model privacy_logs {
  id             String   @id
  userId         String?
  level          String
  message        String
  category       String
  metadata       Json     @default("{}")
  classification String
  timestamp      DateTime @default(now())
  anonymized     Boolean  @default(false)
}

model project_categories {
  id                       String               @id
  name                     String
  description              String?
  slug                     String
  icon                     String               @default("Folder")
  color                    String               @default("#6366f1")
  position                 Int                  @default(0)
  projectId                String
  parentId                 String?
  settings                 Json                 @default("{}")
  createdAt                DateTime             @default(now())
  updatedAt                DateTime
  articles                 articles[]
  project_categories       project_categories?  @relation("project_categoriesToproject_categories", fields: [parentId], references: [id])
  other_project_categories project_categories[] @relation("project_categoriesToproject_categories")
  projects                 projects             @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, slug])
}

model projects {
  id                    String                  @id
  title                 String
  description           String?
  templateId            String?
  authorId              String
  status                ProjectStatus           @default(ACTIVE)
  progress              Float                   @default(0)
  settings              Json                    @default("{}")
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  article_relationships article_relationships[]
  articles              articles[]
  project_categories    project_categories[]
  users                 users                   @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model ratings {
  id        String   @id
  value     Int
  review    String?
  workId    String
  userId    String
  createdAt DateTime @default(now())
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  works     works    @relation(fields: [workId], references: [id], onDelete: Cascade)

  @@unique([workId, userId])
}

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model strikes {
  id          String   @id
  userId      String
  type        String
  severity    String
  description String
  evidence    String[]
  issuedBy    String
  issuedAt    DateTime @default(now())
  expiresAt   DateTime
  appealed    Boolean  @default(false)
  status      String   @default("active")
  users       users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model users {
  id                                                        String                @id
  username                                                  String                @unique
  email                                                     String                @unique
  displayName                                               String
  avatarUrl                                                 String?
  bio                                                       String?
  role                                                      Role                  @default(MEMBER)
  emailVerified                                             Boolean               @default(false)
  totpSecret                                                String?
  isApproved                                                Boolean               @default(false)
  agreedToTerms                                             Boolean               @default(false)
  isOver18                                                  Boolean               @default(false)
  createdAt                                                 DateTime              @default(now())
  updatedAt                                                 DateTime
  lastActiveAt                                              DateTime              @default(now())
  newsletterSubscribed                                      Boolean               @default(false)
  subscriptionDate                                          DateTime?
  reputationScore                                           Int                   @default(50)
  trustLevel                                                Int                   @default(0)
  password                                                  String?
  birthday                                                  DateTime?
  onWaitlist                                                Boolean               @default(false)
  phoneNumber                                               String?               @unique
  pronouns                                                  String?
  accounts                                                  accounts[]
  achievements                                              achievements[]
  annotation_replies                                        annotation_replies[]
  annotations                                               annotations[]
  articles                                                  articles[]
  collections                                               collections[]
  comments                                                  comments[]
  communities                                               communities[]
  community_invites                                         community_invites[]
  community_members                                         community_members[]
  community_proposals_community_proposals_proposerIdTousers community_proposals[] @relation("community_proposals_proposerIdTousers")
  community_proposals_community_proposals_reviewedByTousers community_proposals[] @relation("community_proposals_reviewedByTousers")
  discussion_posts                                          discussion_posts[]
  discussion_replies                                        discussion_replies[]
  discussion_votes                                          discussion_votes[]
  follows_follows_followerIdTousers                         follows[]             @relation("follows_followerIdTousers")
  follows_follows_followingIdTousers                        follows[]             @relation("follows_followingIdTousers")
  moderation_actions                                        moderation_actions[]
  moderation_appeals                                        moderation_appeals[]
  notifications_notifications_actorIdTousers                notifications[]       @relation("notifications_actorIdTousers")
  notifications_notifications_userIdTousers                 notifications[]       @relation("notifications_userIdTousers")
  projects                                                  projects[]
  ratings                                                   ratings[]
  sessions                                                  sessions[]
  strikes                                                   strikes[]
  works                                                     works[]
}

model works {
  id                     String             @id
  title                  String
  content                Json
  excerpt                String?
  authorId               String
  status                 WorkStatus         @default(DRAFT)
  visibility             Visibility         @default(PRIVATE)
  publishedToCommunities String[]
  publishedToPublic      Boolean            @default(false)
  publishedToFollowers   Boolean            @default(false)
  acceptingFeedback      Boolean            @default(false)
  betaEndDate            DateTime?
  viewCount              Int                @default(0)
  rating                 Float?
  tags                   String[]
  createdAt              DateTime           @default(now())
  updatedAt              DateTime
  publishedAt            DateTime?
  communityId            String?
  articleId              String?
  annotations            annotations[]
  collection_items       collection_items[]
  comments               comments[]
  ratings                ratings[]
  articles               articles?          @relation(fields: [articleId], references: [id])
  users                  users              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  communities            communities?       @relation(fields: [communityId], references: [id])
}

enum AccountStatus {
  ACTIVE
  WARNED
  SUSPENDED
  BANNED
}

enum AnnotationType {
  FEEDBACK
  SUGGESTION
  QUESTION
  PRAISE
}

enum AppealStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AppealTargetType {
  POST
  REPLY
}

enum ArticleStatus {
  DRAFT
  IN_REVIEW
  COMPLETE
  ARCHIVED
}

enum CommunityPrivacy {
  PUBLIC
  GUARDED
  PRIVATE
}

enum CommunityRole {
  MEMBER
  MODERATOR
  ADMIN
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum ModerationStatus {
  CLEAN
  FLAGGED
  UNDER_APPEAL
  OVERRIDDEN
}

enum NotificationType {
  COMMENT
  LIKE
  FOLLOW
  MENTION
  WORK
  SYSTEM
}

enum PostPrivacy {
  PUBLIC
  PRIVATE
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
  PAUSED
}

enum ProposalStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum RelationshipType {
  REFERENCES
  DEPENDS_ON
  SUPPORTS
  CONTRADICTS
  BUILDS_ON
  RELATED_TO
}

enum Role {
  MEMBER
  ADMIN
}

enum Visibility {
  PRIVATE
  FOLLOWERS
  COMMUNITY
  PUBLIC
}

enum WorkStatus {
  DRAFT
  BETA
  PUBLISHED
  ARCHIVED
}
